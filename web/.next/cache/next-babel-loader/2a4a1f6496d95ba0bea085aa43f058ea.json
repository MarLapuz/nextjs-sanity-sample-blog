{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Users\\\\michael.lapuz\\\\Downloads\\\\Projects\\\\my-blog\\\\web\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n        *[_type == \\\"post\\\" && publishedAt < now()]|order(publishedAt desc)\\n    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport Link from 'next/link';\nimport groq from 'groq';\nimport client from '../client';\n\nvar Index = function Index(props) {\n  var _props$posts = props.posts,\n      posts = _props$posts === void 0 ? [] : _props$posts;\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"Welcome to a blog!\"), console.log(props), posts.map(function (_ref) {\n    var _id = _ref._id,\n        _ref$title = _ref.title,\n        title = _ref$title === void 0 ? '' : _ref$title,\n        _ref$slug = _ref.slug,\n        slug = _ref$slug === void 0 ? '' : _ref$slug,\n        _ref$_updatedAt = _ref._updatedAt,\n        _updatedAt = _ref$_updatedAt === void 0 ? '' : _ref$_updatedAt;\n\n    return slug && __jsx(\"li\", {\n      key: _id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15\n      },\n      __self: this\n    }, __jsx(Link, {\n      href: \"/post/[slug]\",\n      as: \"/post/\".concat(slug.current),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16\n      },\n      __self: this\n    }, __jsx(\"a\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, title), \"(\", new Date(_updatedAt).toDateString(), \")\"));\n  }));\n};\n\nIndex.getInitialProps = function _callee() {\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(client.fetch(groq(_templateObject())));\n\n        case 2:\n          _context.t0 = _context.sent;\n          return _context.abrupt(\"return\", {\n            posts: _context.t0\n          });\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Index;","map":{"version":3,"sources":["C:/Users/michael.lapuz/Downloads/Projects/my-blog/web/pages/index.js"],"names":["Link","groq","client","Index","props","posts","console","log","map","_id","title","slug","_updatedAt","current","Date","toDateString","getInitialProps","fetch"],"mappings":";;;;;;;;;;;;;;;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAEA,OAAOC,MAAP,MAAmB,WAAnB;;AAEA,IAAMC,KAAK,GAAG,SAARA,KAAQ,CAACC,KAAD,EAAW;AAAA,qBACEA,KADF,CACbC,KADa;AAAA,MACbA,KADa,6BACL,EADK;AAEzB,SACM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEGC,OAAO,CAACC,GAAR,CAAYH,KAAZ,CAFH,EAGGC,KAAK,CAACG,GAAN,CACG;AAAA,QAAGC,GAAH,QAAGA,GAAH;AAAA,0BAAQC,KAAR;AAAA,QAAQA,KAAR,2BAAgB,EAAhB;AAAA,yBAAoBC,IAApB;AAAA,QAAoBA,IAApB,0BAA2B,EAA3B;AAAA,+BAA+BC,UAA/B;AAAA,QAA+BA,UAA/B,gCAA4C,EAA5C;;AAAA,WACAD,IAAI,IACA;AAAI,MAAA,GAAG,EAAEF,GAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,MAAC,IAAD;AAAM,MAAA,IAAI,EAAC,cAAX;AAA0B,MAAA,EAAE,kBAAWE,IAAI,CAACE,OAAhB,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIH,KAAJ,CADJ,OAEM,IAAII,IAAJ,CAASF,UAAT,EAAqBG,YAArB,EAFN,MADJ,CAFJ;AAAA,GADH,CAHH,CADN;AAiBC,CAnBD;;AAqBAZ,KAAK,CAACa,eAAN,GAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACPd,MAAM,CAACe,KAAP,CAAahB,IAAb,oBADO;;AAAA;AAAA;AAAA;AACpBI,YAAAA,KADoB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAMA,eAAeF,KAAf","sourcesContent":["import Link from 'next/link'\r\nimport groq from 'groq'\r\n\r\nimport client from '../client'\r\n\r\nconst Index = (props) => {\r\n    const { posts = [] } = props\r\nreturn (\r\n      <div>\r\n        <h1>Welcome to a blog!</h1>\r\n        {console.log(props)}\r\n        {posts.map(\r\n            ({ _id, title = '', slug = '', _updatedAt = ''}) =>\r\n            slug && (\r\n                <li key={_id}>\r\n                    <Link href=\"/post/[slug]\" as={`/post/${slug.current}`}>\r\n                        <a>{title}</a>\r\n                        ({new Date(_updatedAt).toDateString()})\r\n                    </Link>\r\n                </li>\r\n            )\r\n        )}\r\n      </div>\r\n    )\r\n}\r\n\r\nIndex.getInitialProps = async () => ({\r\n    posts: await client.fetch(groq`\r\n        *[_type == \"post\" && publishedAt < now()]|order(publishedAt desc)\r\n    `)\r\n})\r\n\r\nexport default Index"]},"metadata":{},"sourceType":"module"}